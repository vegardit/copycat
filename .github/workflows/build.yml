# Copyright 2020-2021 by Vegard IT GmbH, Germany, https://vegardit.com
# SPDX-License-Identifier: Apache-2.0
#
# Author: Sebastian Thomschke, Vegard IT GmbH
#
# https://docs.github.com/en/free-pro-team@latest/actions/reference/workflow-syntax-for-github-actions
name: Build

on:
  push:
    branches:
    - '**'
    tags-ignore:
    - '**'
    paths-ignore:
    - '**/*.adoc'
    - '**/*.md'
    - '.github/*.yml'
  pull_request:
  workflow_dispatch:
    # https://github.blog/changelog/2020-07-06-github-actions-manual-triggers-with-workflow_dispatch/
    inputs:
      additional_maven_args:
        description: 'Additional Maven Args'
        required: false
        default: ''


env:
  GRAALVM_VERSION: 21.2.0 # https://github.com/graalvm/graalvm-ce-builds/releases
  JAVA_VERSION: 11
  MAIN_CLASS: "com.vegardit.copycat.CopyCatMain"
  RELEASE_NAME: "snapshot"


jobs:
  ###########################################################
  maven-build:
  ###########################################################
    runs-on: ubuntu-latest
    steps:
    - name: Git Checkout
      uses: actions/checkout@v3 #https://github.com/actions/checkout

    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v2 #https://github.com/actions/setup-java
      with:
        distribution: 'zulu'
        java-version: ${{ env.JAVA_VERSION }}

    # reusing CDS archives of the same JVM randomly fails in GitHub Actions with
    # "An error has occurred while processing the shared archive file. shared class paths mismatch"
    #- name: Calculate Java version checksum
    #  id: java-version-checksum
    #  run: |
    #    echo "::set-output name=md5sum::$(java -version 2>&1 | md5sum | cut -f1 -d" ")"
    #- name: Cache Java CDS archive
    #  uses: actions/cache@v3
    #  with:
    #    path: |
    #      ~/.xshare/${{ steps.java-version-checksum.outputs.md5sum }}
    #    key: ${{ runner.os }}-xshare-${{ steps.java-version-checksum.outputs.md5sum }}

    - name: "Cache: Local Maven Repository"
      uses: actions/cache@v3
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-mvnrepo-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-mvnrepo-

    - name: "Cache: Maven Binaries"
      uses: actions/cache@v3
      with:
        path: |
          ~/.m2/bin
        key: ${{ runner.os }}-mvnbin-${{ hashFiles('.ci/build.sh') }}

    - name: Test with Maven
      id: maven-test
      if: ${{ github.ref != 'refs/heads/main' }}
      env:
        GITHUB_USER: ${{ github.actor }}
        GITHUB_API_KEY: ${{ github.token }}
        MAY_CREATE_RELEASE: false
      run: |
        bash .ci/build.sh ${{ github.event.inputs.additional_maven_args }}

    - name: Build with Maven
      id: maven-build
      if: github.ref == 'refs/heads/main'
      env:
        GITHUB_USER: ${{ github.actor }}
        GITHUB_API_KEY: ${{ secrets.GH_API_TOKEN }}
        MAY_CREATE_RELEASE: true
      run: |
        set -eu

        # https://github.community/t/github-actions-bot-email-address/17204
        git config user.name "github-actions[bot]"
        git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
        bash .ci/build.sh

        mv target/copycat-*-fat-minimized.jar target/copycat-fat.jar

    - name: "Share: maven-build-artifacts"
      uses: actions/upload-artifact@v2
      with:
        name: maven-build-artifacts
        path: |
           target/copycat-fat.jar
           target/picocli-reflections.json
           target/bash/bashcompletion.sh


  ###########################################################
  native-linux-amd64:
  ###########################################################
    runs-on: ubuntu-latest
    needs: [maven-build]

    steps:
    - name: "Cache: GraalVM binaries"
      uses: actions/cache@v3
      with:
        path: |
          /opt/graalvm
        key: ${{ runner.os }}-graalvm-${{ env.GRAALVM_VERSION }}

    - name: "Install: GraalVM"
      shell: bash
      run: |
        set -eu

        sudo apt-get install --no-install-recommends -y gcc libz-dev

        if [ ! -e /opt/graalvm/bin/native-image ]; then
           rm -rf /opt/graalvm
           mkdir -p /opt/graalvm

           curl -fL "https://github.com/graalvm/graalvm-ce-builds/releases/download/vm-${GRAALVM_VERSION}/graalvm-ce-java${JAVA_VERSION}-linux-amd64-${GRAALVM_VERSION}.tar.gz" \
             | tar zxv -C /opt/graalvm --strip-components=1 \
                   --exclude=*/bin/jvisualvm \
                   --exclude=*/lib/src.zip \
                   --exclude=*/lib/visualvm

           /opt/graalvm/bin/gu install native-image
        fi

        /opt/graalvm/bin/native-image --version

        echo "JAVA_HOME=/opt/graalvm" >> $GITHUB_ENV
        echo "/opt/graalvm/bin" >> $GITHUB_PATH

    - name: "Install: binutils (strip)"
      run: sudo apt-get --no-install-recommends install -y binutils

    - name: "Install: UPX"
      run: |
        mkdir /opt/upx
        upx_download_url=$(curl -fsSL https://api.github.com/repos/upx/upx/releases/latest | grep browser_download_url | grep amd64_linux.tar.xz | cut "-d\"" -f4)
        echo "Downloading [$upx_download_url]..."
        curl -fL $upx_download_url | tar Jxv -C /opt/upx --strip-components=1

    - name: "Get: maven-build-artifacts"
      uses: actions/download-artifact@v2
      with:
        name: maven-build-artifacts

    - name: "Build executable"
      shell: bash
      run: |
        #https://www.graalvm.org/reference-manual/native-image/Options/
        native-image \
          -H:NativeLinkerOption=-no-pie \
          -H:ReflectionConfigurationFiles=picocli-reflections.json \
          -H:+ReportExceptionStackTraces \
          -H:+RemoveUnusedSymbols \
          --allow-incomplete-classpath \
          --no-fallback \
          --no-server \
          --verbose \
          -H:+StaticExecutableWithDynamicLibC `#https://www.graalvm.org/reference-manual/native-image/StaticImages/#build-a-mostly-static-native-image` \
          --initialize-at-build-time=org.slf4j \
          --initialize-at-build-time=net.sf.jstuff.core.collection.WeakIdentityHashMap \
          --initialize-at-build-time=net.sf.jstuff.core.logging \
          --initialize-at-build-time=net.sf.jstuff.core.reflection.StackTrace \
          --initialize-at-build-time=com.vegardit.copycat.command.sync.AbstractSyncCommand \
          --initialize-at-build-time=com.vegardit.copycat.command.watch.WatchCommand \
          -Dnet.sf.jstuff.core.logging.Logger.preferSLF4J=false \
          -Dfile.encoding=UTF-8 \
          --class-path copycat-fat.jar \
          ${{ env.MAIN_CLASS }} \
          copycat-linux-amd64

    - name: "Minify executable"
      shell: bash
      run: |
        strip --strip-unneeded copycat-linux-amd64
        /opt/upx/upx -v -9 copycat-linux-amd64

    - name: "Test executable"
      shell: bash
      run: |
        chmod u+x copycat-linux-amd64
        ./copycat-linux-amd64 --version
        ./copycat-linux-amd64 --help
        ./copycat-linux-amd64 sync --help
        ./copycat-linux-amd64 watch --help

    - name: "Share: native binary"
      uses: actions/upload-artifact@v2
      with:
        path: copycat-linux-amd64


  ###########################################################
  native-linux-arm64:
  ###########################################################
    runs-on: ubuntu-latest
    needs: [maven-build]

    steps:
    - name: "Cache: GraalVM binaries"
      uses: actions/cache@v3
      with:
        path: |
          /opt/graalvm
        key: ${{ runner.os }}-arm64-graalvm-${{ env.GRAALVM_VERSION }}

    - name: "Create arm64 container"
      run: |
        sudo apt-get update -y
        sudo apt-get install --no-install-recommends -y qemu-user-static
        docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

        docker container create --name arm64 --tty \
          -v /opt:/opt:rw \
          -v $PWD:/workspace:rw \
          arm64v8/ubuntu:20.04

        docker container start arm64

        docker exec --tty arm64 apt-get update -y
        docker exec --tty arm64 apt-get install -y curl sudo

    - name: "Install: GraalVM"
      shell: bash
      run: |
        set -eu

        cat <<EOF > install_graalvm.sh
        set -eu
        sudo apt-get install --no-install-recommends -y gcc libz-dev

        if [ ! -e /opt/graalvm/bin/native-image ]; then
           rm -rf /opt/graalvm
           mkdir -p /opt/graalvm

           curl -fL "https://github.com/graalvm/graalvm-ce-builds/releases/download/vm-${GRAALVM_VERSION}/graalvm-ce-java${JAVA_VERSION}-linux-aarch64-${GRAALVM_VERSION}.tar.gz" \
             | tar zxv -C /opt/graalvm --strip-components=1 \
                   --exclude=*/bin/jvisualvm \
                   --exclude=*/lib/src.zip \
                   --exclude=*/lib/visualvm

           /opt/graalvm/bin/gu install native-image
        fi

        /opt/graalvm/bin/native-image --version
        EOF

        docker exec --tty -w /workspace arm64 /bin/bash ./install_graalvm.sh

    - name: "Install: binutils (strip)"
      run: |
        docker exec --tty arm64 \
        sudo apt-get --no-install-recommends install -y binutils

    - name: "Install: UPX"
      run: |
        mkdir /opt/upx
        upx_download_url=$(curl -fsSL https://api.github.com/repos/upx/upx/releases/latest | grep browser_download_url | grep arm64_linux.tar.xz | cut "-d\"" -f4)
        echo "Downloading [$upx_download_url]..."
        curl -fL $upx_download_url | tar Jxv -C /opt/upx --strip-components=1

    - name: "Get: maven-build-artifacts"
      uses: actions/download-artifact@v2
      with:
        name: maven-build-artifacts

    - name: "Build executable"
      shell: bash
      run: |
        docker exec --tty -w /workspace arm64 /bin/bash -c '
        export JAVA_HOME=/opt/graalvm
        export PATH=/opt/graalvm/bin:$PATH
        #https://www.graalvm.org/reference-manual/native-image/Options/
        native-image \
          -H:NativeLinkerOption=-no-pie \
          -H:ReflectionConfigurationFiles=picocli-reflections.json \
          -H:+ReportExceptionStackTraces \
          -H:+RemoveUnusedSymbols \
          --allow-incomplete-classpath \
          --no-fallback \
          --no-server \
          --verbose \
          -H:+StaticExecutableWithDynamicLibC `#https://www.graalvm.org/reference-manual/native-image/StaticImages/#build-a-mostly-static-native-image` \
          --initialize-at-build-time=org.slf4j \
          --initialize-at-build-time=net.sf.jstuff.core.collection.WeakIdentityHashMap \
          --initialize-at-build-time=net.sf.jstuff.core.logging \
          --initialize-at-build-time=net.sf.jstuff.core.reflection.StackTrace \
          --initialize-at-build-time=com.vegardit.copycat.command.sync.AbstractSyncCommand \
          --initialize-at-build-time=com.vegardit.copycat.command.watch.WatchCommand \
          -Dnet.sf.jstuff.core.logging.Logger.preferSLF4J=false \
          -Dfile.encoding=UTF-8 \
          --class-path copycat-fat.jar \
          ${{ env.MAIN_CLASS }} \
          copycat-linux-arm64
        '

    - name: "Minify executable"
      shell: bash
      run: |
        docker exec --tty -w /workspace arm64 /bin/bash -c '

        strip --strip-unneeded copycat-linux-arm64 &&
        /opt/upx/upx -v -9 copycat-linux-arm64

        '

    - name: "Test executable"
      shell: bash
      run: |
        docker exec --tty -w /workspace arm64 /bin/bash -c '

        chmod u+x  copycat-linux-arm64 &&
        ./copycat-linux-arm64 --version &&
        ./copycat-linux-arm64 --help &&
        ./copycat-linux-arm64 sync --help &&
        ./copycat-linux-arm64 watch --help

        '

    - name: "Share: native binary"
      uses: actions/upload-artifact@v2
      with:
        path: copycat-linux-arm64


  ###########################################################
  native-macos-amd64:
  ###########################################################
    runs-on: macos-latest
    needs: [maven-build]

    steps:
    - name: "Cache: GraalVM binaries"
      uses: actions/cache@v3
      with:
        path: |
          graalvm
        key: ${{ runner.os }}-graalvm-${{ env.GRAALVM_VERSION }}

    - name: "Install: GraalVM"
      shell: bash
      run: |
        set -eu

        GRAAL_VM_HOME=graalvm/Contents/Home

        if [ ! -e $GRAAL_VM_HOME/bin/native-image ]; then
           rm -rf graalvm
           mkdir graalvm

           curl -fL "https://github.com/graalvm/graalvm-ce-builds/releases/download/vm-${GRAALVM_VERSION}/graalvm-ce-java${JAVA_VERSION}-darwin-amd64-${GRAALVM_VERSION}.tar.gz" \
             | tar zxv -C graalvm --strip-components=1 \
                   --exclude=*/bin/jvisualvm \
                   --exclude=*/lib/src.zip \
                   --exclude=*/lib/visualvm

           $GRAAL_VM_HOME/bin/gu install native-image
        fi

        $GRAAL_VM_HOME/bin/native-image --version

        echo "JAVA_HOME=$GRAAL_VM_HOME" >> $GITHUB_ENV
        echo "$GRAAL_VM_HOME/bin" >> $GITHUB_PATH

    - name: "Install: UPX"
      run: brew install upx

    - name: "Get: maven-build-artifacts"
      uses: actions/download-artifact@v2
      with:
        name: maven-build-artifacts

    - name: "Build executable"
      shell: bash
      run: |
        # not using "--static" because of error: DARWIN does not support building static executable images.
        #https://www.graalvm.org/reference-manual/native-image/Options/
        native-image \
          -H:NativeLinkerOption=-no-pie \
          -H:ReflectionConfigurationFiles=picocli-reflections.json \
          -H:+ReportExceptionStackTraces \
          -H:+RemoveUnusedSymbols \
          --allow-incomplete-classpath \
          --no-fallback \
          --no-server \
          --verbose \
          --initialize-at-build-time=org.slf4j \
          --initialize-at-build-time=net.sf.jstuff.core.collection.WeakIdentityHashMap \
          --initialize-at-build-time=net.sf.jstuff.core.logging \
          --initialize-at-build-time=net.sf.jstuff.core.reflection.StackTrace \
          --initialize-at-build-time=com.vegardit.copycat.command.sync.AbstractSyncCommand \
          --initialize-at-build-time=com.vegardit.copycat.command.watch.WatchCommand \
          -Dnet.sf.jstuff.core.logging.Logger.preferSLF4J=false \
          -Dfile.encoding=UTF-8 \
          --class-path copycat-fat.jar \
          ${{ env.MAIN_CLASS }} \
          copycat-darwin-amd64

    - name: "Minify executable"
      shell: bash
      run: |
        # https://www.unix.com/man-page/osx/1/strip/
        strip copycat-darwin-amd64
        upx -v -9 copycat-darwin-amd64

    - name: "Test executable"
      shell: bash
      run: |
        chmod u+x copycat-darwin-amd64
        ./copycat-darwin-amd64 --version
        ./copycat-darwin-amd64 --help
        ./copycat-darwin-amd64 sync --help
        ./copycat-darwin-amd64 watch --help

    - name: "Share: native binary"
      uses: actions/upload-artifact@v2
      with:
        path: copycat-darwin-amd64


  ###########################################################
  native-windows-amd64:
  ###########################################################
    # preinstalled software: https://github.com/actions/virtual-environments/blob/main/images/win/Windows2019-Readme.md
    runs-on: windows-latest
    needs: [maven-build]

    steps:
    - name: Enable Developer Command Prompt
      # makes cl.exe available on PATH
      # https://github.com/marketplace/actions/enable-developer-command-prompt
      uses: ilammy/msvc-dev-cmd@v1
  
    - name: "Cache: GraalVM binaries"
      uses: actions/cache@v3
      with:
        path: |
          graalvm-ce-java${{ env.JAVA_VERSION }}-${{ env.GRAALVM_VERSION }}
        key: ${{ runner.os }}-graalvm-${{ env.GRAALVM_VERSION }}

    - name: "Install: GraalVM"
      shell: powershell
      run: |
        if (!(Test-Path "graalvm-ce-java${{ env.JAVA_VERSION }}-${{ env.GRAALVM_VERSION }}")) {
           echo "Downloading GraalVM..."
           Invoke-RestMethod -Uri https://github.com/graalvm/graalvm-ce-builds/releases/download/vm-${{ env.GRAALVM_VERSION }}/graalvm-ce-java${{ env.JAVA_VERSION }}-windows-amd64-${{ env.GRAALVM_VERSION }}.zip -OutFile 'graalvm.zip'

           echo "Extracting GraalVM..."
           Expand-Archive -path 'graalvm.zip' -destinationpath '.'

           echo "Installing native-image..."
           graalvm-ce-java${{ env.JAVA_VERSION }}-${{ env.GRAALVM_VERSION }}\bin\gu.cmd install native-image
        }

        & "graalvm-ce-java${{ env.JAVA_VERSION }}-${{ env.GRAALVM_VERSION }}\bin\native-image" "--version"

        echo "Extend GITHUB_PATH..."
        echo "$(($pwd).path)\graalvm-ce-java${{ env.JAVA_VERSION }}-${{ env.GRAALVM_VERSION }}\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

        echo "Extend GITHUB_ENV..."
        echo "JAVA_HOME=$(($pwd).path)\graalvm-ce-java${{ env.JAVA_VERSION }}-${{ env.GRAALVM_VERSION }}" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

    - name: "Install: UPX"
      # first choco install in a build takes 3+ minutes
      # shell: cmd
      # run: choco install -y upx
      shell: bash
      run: |
        set -eux

        upx_download_url=$(curl -fsSL https://api.github.com/repos/upx/upx/releases/latest | grep browser_download_url | grep win64.zip | cut "-d\"" -f4)
        echo "Downloading [$upx_download_url]..."
        curl -fL -o /tmp/upx.zip $upx_download_url

        echo "Extracting upx.zip..."
        mkdir /tmp/upx
        7z e /tmp/upx.zip -o/tmp/upx *.exe -r
        echo "$(cygpath -wa /tmp/upx)" >> $GITHUB_PATH

    - name: "Get: maven-build-artifacts"
      uses: actions/download-artifact@v2
      with:
        name: maven-build-artifacts

    - name: "Build executable"
      shell: cmd
      run: |
        call "C:\Program Files (x86)\Microsoft Visual Studio\2017\BuildTools\VC\Auxiliary\Build\vcvars64.bat"

        "%JAVA_HOME%\bin\native-image" ^
          -H:NativeLinkerOption=-no-pie ^
          -H:ReflectionConfigurationFiles=picocli-reflections.json ^
          -H:+ReportExceptionStackTraces ^
          -H:+RemoveUnusedSymbols ^
          --allow-incomplete-classpath ^
          --no-fallback ^
          --no-server ^
          --verbose ^
          --static ^
          --initialize-at-build-time=org.slf4j ^
          --initialize-at-build-time=net.sf.jstuff.core.collection.WeakIdentityHashMap ^
          --initialize-at-build-time=net.sf.jstuff.core.logging ^
          --initialize-at-build-time=net.sf.jstuff.core.reflection.StackTrace ^
          --initialize-at-build-time=com.vegardit.copycat.command.sync.AbstractSyncCommand ^
          --initialize-at-build-time=com.vegardit.copycat.command.watch.WatchCommand ^
          -Dnet.sf.jstuff.core.logging.Logger.preferSLF4J=false ^
          -Dfile.encoding=UTF-8 ^
          --class-path copycat-fat.jar ^
          ${{ env.MAIN_CLASS }} ^
          copycat-windows-amd64

    - name: "Minify executable"
      run: upx -v -9 copycat-windows-amd64.exe

    - name: "Test executable"
      shell: cmd
      run: |
        copycat-windows-amd64.exe --version
        copycat-windows-amd64.exe --help
        copycat-windows-amd64.exe sync --help
        copycat-windows-amd64.exe watch --help

    - name: "Share: native binary"
      uses: actions/upload-artifact@v2
      with:
        path: copycat-windows-amd64.exe


  ###########################################################
  publish-release:
  ###########################################################
    runs-on: ubuntu-latest
    needs: 
      - native-linux-amd64
      - native-linux-arm64
      - native-macos-amd64
      - native-windows-amd64
    if: github.ref == 'refs/heads/main'

    steps:

    - name: "SCM Checkout" 
      # only required by "hub release create" to prevent "fatal: Not a git repository"
      uses: actions/checkout@v3 #https://github.com/actions/checkout

    - name: "Get: all build artifacts"
      uses: actions/download-artifact@v2

    - name: "Delete previous '${{ env.RELEASE_NAME }}' release"
      if: env.RELEASE_NAME == 'snapshot'
      shell: bash
      run: |
        set -eu

        creds="${{ secrets.GH_API_TOKEN }}:x-oauth-basic"
        api_base_url="$GITHUB_API_URL/repos/$GITHUB_REPOSITORY"

        # delete github release
        release_id=$(curl -fsL $creds https://api.github.com/repos/vegardit/copycat/releases | jq -r '.[] | select(.name == "${{ env.RELEASE_NAME }}") | .id')
        if [[ -n $release_id ]]; then
           echo "Deleting release [$api_base_url/releases/$release_id]..."
           curl -u $creds -fsSL -X DELETE "$api_base_url/releases/$release_id"
        fi

        # delete git tag
        tag_url="$api_base_url/git/refs/tags/${{ env.RELEASE_NAME }}"
        if curl -u $creds -fsLo /dev/null --head "$tag_url"; then
           echo "Deleting tag [$tag_url]..."
           curl -u $creds -fsSL -u $creds -X DELETE "$tag_url"
        fi

    - name: "Create '${{ env.RELEASE_NAME }}' Release"
      shell: bash
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        set -eu

        # https://hub.github.com/hub-release.1.html
        hub release create \
          --message "${{ env.RELEASE_NAME }}" "${{ env.RELEASE_NAME }}" \
          --attach "maven-build-artifacts/copycat-fat.jar#copycat-${{ env.RELEASE_NAME }}-fat.jar" \
          --attach "maven-build-artifacts/bash/bashcompletion.sh#copycat-${{ env.RELEASE_NAME }}-bashcompletion.sh" \
          --attach "artifact/copycat-linux-amd64#copycat-${{ env.RELEASE_NAME }}-linux-amd64" \
          --attach "artifact/copycat-linux-arm64#copycat-${{ env.RELEASE_NAME }}-linux-arm64" \
          --attach "artifact/copycat-darwin-amd64#copycat-${{ env.RELEASE_NAME }}-darwin-amd64" \
          --attach "artifact/copycat-windows-amd64.exe#copycat-${{ env.RELEASE_NAME }}-windows-amd64.exe" \
          --prerelease

    - name: "Delete intermediate build artifacts"
      uses: geekyeggo/delete-artifact@1-glob-support # https://github.com/GeekyEggo/delete-artifact/
      with:
        name: "*"
        useGlob: true
        failOnError: false
